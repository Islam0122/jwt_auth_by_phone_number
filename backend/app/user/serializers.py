from datetime import timedelta
import random
from django.conf import settings
from django.utils import timezone
from rest_framework import serializers
from .models import UserModel, UserProfile
from .utils import send_otp


### üìå **1. –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
class UserRegistrationSerializer(serializers.ModelSerializer):
    password1 = serializers.CharField(
        write_only=True,
        min_length=settings.MIN_PASSWORD_LENGTH,
        required=False,
        error_messages={
            "min_length": f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {settings.MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        },
    )
    password2 = serializers.CharField(
        write_only=True,
        min_length=settings.MIN_PASSWORD_LENGTH,
        required=False,
        error_messages={
            "min_length": f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {settings.MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        },
    )

    class Meta:
        model = UserModel
        fields = (
            "id",
            "phone_number",
            "email",
            "password1",
            "password2",
        )
        read_only_fields = ("id",)

    def validate(self, data):
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
        if data.get("password1") and data.get("password2"):
            if data["password1"] != data["password2"]:
                raise serializers.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
        return data

    def create(self, validated_data):
        otp = random.randint(1000, 9999)
        otp_expiry = timezone.now() + timedelta(minutes=10)  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è OTP

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email –∏ OTP
        user = UserModel.objects.create(
            phone_number=validated_data["phone_number"],
            email=validated_data.get("email"),
            otp=otp,
            otp_expiry=otp_expiry,
            max_otp_try=settings.MAX_OTP_TRY
        )

        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if validated_data.get("password1"):
            user.set_password(validated_data["password1"])

        user.save()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –ø–æ SMS
        send_otp(validated_data["phone_number"], otp)
        return user


### üìå **2. –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP-–∫–æ–¥–∞**
class OTPVerificationSerializer(serializers.Serializer):
    phone_number = serializers.CharField(
        max_length=15,
        required=True,
        error_messages={"required": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."}
    )
    otp = serializers.CharField(
        max_length=6,
        required=True,
        error_messages={"required": "–í–≤–µ–¥–∏—Ç–µ OTP-–∫–æ–¥ –∏–∑ SMS."}
    )

    def validate(self, data):
        phone_number = data.get("phone_number")
        otp = data.get("otp")

        try:
            user = UserModel.objects.get(phone_number=phone_number)
        except UserModel.DoesNotExist:
            raise serializers.ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if int(user.max_otp_try) <= 0:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (otp_max_out)
            if user.otp_max_out and timezone.now() < user.otp_max_out:
                raise serializers.ValidationError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è OTP
        if user.otp_expiry and timezone.now() > user.otp_expiry:
            raise serializers.ValidationError("OTP-–∫–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ OTP
        if user.otp != otp:
            user.save()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ OTP
            raise serializers.ValidationError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OTP-–∫–æ–¥.")

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        user.is_active = True
        user.otp = None
        user.otp_expiry = None
        user.max_otp_try = settings.MAX_OTP_TRY
        user.save()

        return data

    def resend_otp(self, phone_number):
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP. """
        try:
            user = UserModel.objects.get(phone_number=phone_number)
        except UserModel.DoesNotExist:
            raise serializers.ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        otp = random.randint(1000, 9999)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ OTP
        otp_expiry = timezone.now() + timedelta(minutes=10)  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ OTP

        user.otp = otp
        user.otp_expiry = otp_expiry
        user.max_otp_try = settings.MAX_OTP_TRY  # –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        user.otp_max_out = None  # –°–±—Ä–æ—Å–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        user.save()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –ø–æ SMS
        send_otp(user.phone_number, otp)
        return {"message": "OTP —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–Ω–æ–≤–∞."}


### üìå **3. –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = (
            "first_name",
            "last_name",
            "subscriptions"
        )


### üìå **4. –ü–æ–ª–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º**
class UserFullProfileSerializer(serializers.ModelSerializer):
    profile = UserProfileSerializer()

    class Meta:
        model = UserModel
        fields = (
            "id",
            "phone_number",
            "email",
            "date_of_birth",
            "is_active",
            "profile"
        )
        read_only_fields = ("id", "is_active")

    def update(self, instance, validated_data):
        profile_data = validated_data.pop("profile", None)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        instance.email = validated_data.get("email", instance.email)
        instance.date_of_birth = validated_data.get("date_of_birth", instance.date_of_birth)
        instance.save()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if profile_data:
            profile = instance.profile
            profile.first_name = profile_data.get("first_name", profile.first_name)
            profile.last_name = profile_data.get("last_name", profile.last_name)
            profile.subscriptions = profile_data.get("subscriptions", profile.subscriptions)
            profile.save()

        return instance


class UserSerializer(serializers.ModelSerializer):
    # Use the 'profile' field which is the related name for UserProfile
    profile = UserProfileSerializer()

    class Meta:
        model = UserModel
        fields = '__all__'



from rest_framework_simplejwt.tokens import RefreshToken
class OTPAuthenticationSerializer(serializers.Serializer):
    phone_number = serializers.CharField(
        max_length=15,
        required=True,
        error_messages={"required": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."}
    )
    otp = serializers.CharField(
        max_length=4,  # –î–ª—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ OTP
        required=True,
        error_messages={"required": "–í–≤–µ–¥–∏—Ç–µ OTP-–∫–æ–¥ –∏–∑ SMS."}
    )

    def validate(self, data):
        phone_number = data.get("phone_number")
        otp = data.get("otp")

        phone_number = data.get("phone_number")
        otp = data.get("otp")

        try:
            user = UserModel.objects.get(phone_number=phone_number)
        except UserModel.DoesNotExist:
            raise serializers.ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if int(user.max_otp_try) <= 0:
            if user.otp_max_out and timezone.now() < user.otp_max_out:
                raise serializers.ValidationError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ OTP
        if user.otp != otp:
            user.max_otp_try -= 1
            user.save()
            raise serializers.ValidationError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OTP-–∫–æ–¥.")

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        user.is_active = True
        user.otp = None
        user.otp_expiry = None
        user.max_otp_try = settings.MAX_OTP_TRY  # –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        user.save()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        refresh = RefreshToken.for_user(user)
        tokens = {
            "refresh": str(refresh),
            "access": str(refresh.access_token),
        }

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        return {
            "message": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.",
            "tokens": tokens,
        }
